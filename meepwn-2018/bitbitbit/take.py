from gmpy2 import next_prime, powmod
from random import randint, getrandbits
from libnum import *

n = 8287297838544984822950703626463128025017938608924478713750727557384181373137379712995819380473656660521756866244535654999846653162377426897530580349447317984797144491408650217522971602167674532056255790742308176012542641524092150679365527740563995326619021185986261321649951503231160975477513697118165637677852081056753385832648833470835454877184478935650003196536846143749937771076421413616597106334326675416530707938082303117049053363082879489715211360993206626355628281354959859998565542048984070569498789939314026806629029316121164423075010721892771090050828771409949303413755653367926368830132123299790623231723
gamma = 638
delta = 5332021880232351051510421452690427597452137881085063023068
ciphertext = 6973733062478763450492669858886423464625604250008473772673762533701910692423530366597538835093557617211346734620879832771259897155653164165729367134360493178124676929407289752829081241927173605157586965349202867512952616200409685414703435029696051438090856045136884973977970824108820078450584277987873793005662985711866863741504967170588561227067844734877779537159486926027081450001428033175669338661653297008643091158555946784562977750676165340579882590503922675714851254428037067944062628244571900675953073733519242910089454825134249557238644548976362987918575244158715321915719655856306204575758753162812974979603

  
#n,gamma,delta = gen_key()

t2 = (1024+gamma)/2
t1 = 1024-t2
mod1 = 1<<t1
mod2 = 1<<t2

tmp = n%mod1
tmp2 = n%mod2
delta = delta%mod1

cnt = 0

f = open('data','wb')
f.write(str(n)+'\n')
f.write(str(t1)+'\n')
f.write(str(t2)+'\n')
for td in range(delta-500, delta+500):
  try:
    d = td%mod1
    b = (d*d+4*tmp)%mod1
    sqrt = list(sqrtmod_prime_power(b,2,t1))
    cq = [ ((-d-v)/2)%mod1 for v in sqrt] + [ ((-d+v)/2)%mod1 for v in sqrt]
    cq = filter( lambda x: ((x+td)*x)%mod1 == tmp,cq)
    cp = [(q+td)%mod1 for q in cq] 
    for p0,q0 in zip(cp,cq):
      b,c = (p0+q0)%mod2, (p0*q0-tmp2)%mod2
      sqrt2 = list(sqrtmod_prime_power(b*b-4*c,2,t2))
      cr = [ ((-b-v)/2)%mod2 for v in sqrt2] + [ ((-b+v)/2)%mod2 for v in sqrt2]
      cr = filter( lambda x: ((x+p0)*(x+q0))%mod2 == tmp2,cr)
      for r in cr:
        f.write(str(p0)+" "+str(q0)+" "+str(r)+"\n")
        cnt += 1
  except:
    pass
print cnt
f.close() 
      

  


